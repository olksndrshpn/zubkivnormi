const conf = require('./config') //
const MD5 = require("md5")
const {user} = require("./models")

const {Telegraf, Markup} = require('telegraf')
const bot = new Telegraf(conf.authToken)
const knex = require('knex')(conf.MySQL);
knex.debug(true);
const Axios = require('axios')
const bjs = require('bitcoinjs-lib');
const { response } = require('express')
const XPubGenerator = require('xpub-generator').XPubGenerator;


const TenMinutes = 10 * 60 * 1000 //–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å –∫–æ—Ç–æ—Ä—ã–º –º—ã –±—É–¥–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–æ—à–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
var Status = 'Sleep' //–¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∞–¥–º–∏–Ω–∫–µ
var checkorder = [] //–ú–∞—Å—Å–∏–≤ –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è id —á–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤, –¥–∞–ª—å—à–µ –ø–æ–π–º–µ—Ç–µ
var Product = {
    Name: '',
    Description: '',
    Price: 0
}


bot.start(ctx => { //–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –ø—Ä–∏–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
    const { id, username, first_name, last_name } = ctx.from;
   async ()=>{
       const ifuser = await user.create({username: username, name: first_name, chat_id: id})
   console.log(ifuser)}

return ctx.replyWithHTML(`–ü—Ä–∏–≤–µ—Ç, ${first_name}! 
   
üíäüíäüíäüíäüíäüíäüíäüíäüíäüíäüíäüíäüíäüíäüíäüíäüíäüíäüíäüíäüíäüíäüíäüíäüíäüíäüíäüíäüíäüíäüíäüíäüíäüíäüíäüíä
ALFA-PVP –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è!

–¢–∞–∫ –∂–µ —Å–∫–æ—Ä–æ —Ä–æ–∑–Ω–∏—á–Ω—ã–µ –∫–ª–∞–¥—ã –ø–æ –≤–∫—É—Å–Ω—ã–º —Ü–µ–Ω–∞–º –≤–æ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–∞—Ö —Å—Ç—Ä–∞–Ω—ã!!!


–ü–æ–∫–∞ —á—Ç–æ —Ç–æ–ª—å–∫–æ –°–ü–ë! 
–í—Å–µ–º –¥–æ–±—Ä–∞!

`, Markup.keyboard([
  ['–ß—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å?'],['–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞'],
  ['–ö—Ç–æ –º—ã']

]))


})
bot.help( ctx => ctx.reply('/showproducs - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ \n/checkorder - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞'))

 /* –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π*/

async function calcPrice(price){ //–≠—Ç–∞ —Ñ—É–Ω–∫–∏—è –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—Ç—å $ –≤ BTC –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫—É—Ä—Å—É
    try{
        let response = await Axios.get(`https://web-api.coinmarketcap.com/v1/tools/price-conversion?amount=${price}&convert_id=1&id=2781`)
        return Number(response.data.data.quote['1'].price.toFixed(8))  
    } catch(err){
        return 'Error'
    }     
}

async function getBalance(address){ //–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
    try{
        let response = await Axios.get(`https://chain.api.btc.com/v3/address/${address}`)        
        return {recei1ed: Number((response.data.data.received * 0.00000001).toFixed(8)), unconfirmed: Number((response.data.data.unconfirmed_received * 0.00000001).toFixed(8))}
    } catch(err){
        console.log(err)
        return {received: 'Error', unconfirmed: 'Error'}
    }
}

bot.on('callback_query', async ctx =>{//–°–æ–±—ã—Ç–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∫—É–ø–∏—Ç—å
    try{
        let t = ctx.update.callback_query.data.split('$') //—Ç—É—Ç –º—ã —Å–ø–ª–∏—Ç–∞–µ–º –¥–∞—Ç—É –∫–æ—Ç–æ—Ä–∞—è –≤–ª–æ–∂–µ–Ω–∞ –≤ –∫–Ω–æ–ø–∫—É –∫–æ—Ç–æ—Ä—É—é –Ω–∞–∂–∞–ª–∏
        let summa = await calcPrice(t[1]) //—Å—á–∏—Ç–∞–µ–º —Ü–µ–Ω—É
        if (summa === 'Error') throw new Error('–í–æ –≤—Ä–µ–º—è –ø—Ä–æ—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')         
        let didi = -1
        let addresses = []
        for (let addr of await knex('my_orders').select('address')) addresses.push(addr.address) //–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–∑ –±–¥ btc-–∞–¥—Ä–µ—Å—Å–∞ –∑–∞–∫–∞–∑–æ–≤       
        
        do {
            didi++
            t_address = new XPubGenerator(conf.xPub, bjs.networks.bitcoin).nthReceiving(didi)    
        } while (addresses.includes(t_address)) //–ü–æ xPub –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å–∞ –¥–æ —Ç–µ—Ö –ø–æ—Ä –ø–æ–∫–∞ –Ω–µ –ø–æ–ø–∞–¥–µ—Ç—Å—è —Ç–æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ –±–¥
        
        let Arra = {
            order_id: MD5(Date.now().toString+ctx.update.callback_query.id), //–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤ –∏—Ç–æ–≥–µ –∫–ª–∏–µ–Ω—Ç –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –∑–∞–∫–∞–∑
            address: t_address,
            status: '–í –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã',            
            price: summa,                    
            product_id: t[0],
            product_data: '–ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã'        
        } 
        await knex('my_orders').insert(Arra) //–°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä 
        ctx.reply(`–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –≤ —Å–ª—É—á–∞–µ –Ω–µ –æ–ø–ª–∞—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–∏ –ø–æ–ª—É—Ç–æ—Ä–∞ —á–∞—Å–∞, –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –ª–∏–∫–≤–∏–¥–∏—Ä–æ–≤–∞–Ω. \nID –∑–∞–∫–∞–∑–∞: ${Arra.order_id}\n–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã: ${Arra.address}\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${Arra.price}\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–∏–≤ –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /checkorder`)
    } catch(err){
        console.log(err)
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ')
    }
})

bot.hears('–ß—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å?', ctx =>{ //–æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã
    knex.select().from('my_productsinfo')
    .then( resp =>{
        for (let product of resp){
            knex('my_products').where({product_id: product.product_id}).count({count: '*'})
            .then( resp => ctx.reply(`ID: ${product.product_id}\nName: ${product.name}\nDescription: ${product.description}\nPrice: ${product.price}$\nCount: ${resp[0].count}`,
                Markup.inlineKeyboard([Markup.button.callback('–ö—É–ø–∏—Ç—å', `${product.product_id}$${product.price}`)]) )) //–î–∞—Ç–∞ –≤ –∫–Ω–æ–ø–∫–µ —ç—Ç–æ ID$Price –ø—Ä–æ–¥—É–∫—Ç–∞
            .catch( err => ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤'))            
        }
    })
    .catch(err => ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤'))
})
bot.hears('–ö—Ç–æ –º—ã', ctx =>{ ctx.replyWithHTML ('–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –æ–ø—ã—Ç–Ω—ã—Ö —Ö–∏–º–∏–∫–æ–≤ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤ —Å–≤–æ–µ–≥–æ –¥–µ–ª–∞!–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–≤–æ–π –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä ¬´ –ê–ª—å—Ñ–∞ -–ê –ü–í–ü¬ª –ö—Ä–∏—Å—Ç–∞–ª–ª—ã –≤—Å–µ—Ö —Ü–≤–µ—Ç–æ–≤ –ø–æ–¥ –∑–∞–∫–∞–∑ –∏ –≤ –Ω–∞–ª–∏—á–∏–µ ( —Å–∏–Ω–∏–µ, –∫—Ä–∞—Å–Ω—ã–µ, –∑–µ–ª—ë–Ω—ã–µ, –±–µ–ª—ã–µ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ, –∞ —Ç–∞–∫ –∂–µ –ª—é–±–æ–π —Ü–≤–µ—Ç –∏ –≤–∫—É—Å ) –ø–æ —Å–∞–º—ã–º –Ω–∏–∑–∫–∏–º –æ–ø—Ç–æ–≤—ã–º —Ü–µ–Ω–∞–º!–û—Ç–ø—Ä–∞–≤–∏–º –∫—É—Ä—å–µ—Ä—Å–∫–æ–π —Å–ª—É–∂–±–æ–π –≤ –ª—é–±–æ–π –≥–æ—Ä–æ–¥ –†–æ—Å–∏–∏! –¢–∞–∫ –∂–µ –¥–æ—Å—Ç–∞–≤–∫–∞ –≤ –≤–∞—à –≥–æ—Ä–æ–¥ –æ—Ç 2—Ö–∫–≥!')
})
bot.hears('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞', ctx =>{ //–ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–¥–µ—Ä–∞
    checkorder.push(ctx.message.chat.id)
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞')
}) 

bot.on('text', async (ctx, next) =>{ //–≠—Ç–æ —Å–æ–±—ã—Ç–∏–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (checkorder.includes(ctx.message.chat.id)){ //–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –µ—Å–ª–∏ —á–∞—Ç –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥       
        const STF = await knex('my_orders').where({order_id: ctx.message.text})
        if (STF[0] == undefined){            
            ctx.reply('–û—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
        } else {                             
            ctx.reply(`ID –∑–∞–∫–∞–∑–∞: ${STF[0].order_id}\nID –ø—Ä–æ–¥—É–∫—Ç–∞: ${STF[0].product_id}\n–†–µ–∫–≤–∏–∑–∏—Ç—ã: ${STF[0].address}\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${STF[0].price}\n–°—Ç–∞—Ç—É—Å: ${STF[0].status}\n–¢–æ–≤–∞—Ä: ${STF[0].product_data}`)
        }                    
    checkorder.splice(checkorder.indexOf(ctx.message.chat.id), 1) //–£–¥–∞–ª—è–µ–º –∏–∑ –º–∞—Å—Å–∏–≤–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–∞ —É–±–∏—Ä–∞–µ—Ç—Å—è                           
    }
    next()
})

bot.command('/echo', ctx =>{ //–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω—É–∂–Ω–∞ —á—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å id —á–∞—Ç–∞ —Å –Ω–∞–º–∏, –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —É–∫–∞–∂–∏—Ç–µ –Ω—É–∂–Ω—ã–π id –≤ –∫–æ–Ω—Ñ–∏–≥–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É
  ctx.reply(ctx.message.chat.id)  
})

/* –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*/

bot.use((ctx, next) =>{ //–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –≤–µ—â—å, middleware, —Ç–µ –∫—Ç–æ —é–∑–∞–ª —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ Express, —Ç–æ—á–Ω–æ –∑–Ω–∞—é—Ç —á—Ç–æ —ç—Ç–æ –∑–∞ —à—Ç—É—á–∫–∞ 
    if (ctx.message.chat.id === conf.adminChatId) next() // –ï—Å–ª–∏ –º—ã –∏–∑ —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ç–æ –µ–¥–µ–º –¥–∞–ª—å—à–µ –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
})

bot.command('/cancel', ctx =>{ 
    Status = 'Sleep' //–û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    ctx.reply('–í—Å–µ —Ç–µ–∫—É—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã')
})

bot.command('/addproduct', ctx =>{
    Status = 'AddProduct_N' //–ø–µ—Ä–µ—Ö–æ–∏–º –≤ —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
    ctx.reply('–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')     
})

bot.command('/addproductdata', ctx =>{
    Status = 'AddProductData' //–¥–æ–±–∞–≤–ª—è–µ–º —Å–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ç—ã
    ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ ID$ProductData\n–ù–∞–ø—Ä–∏–º–µ—Ä 3$email:password')     
})

bot.command('/showproductdata', ctx =>{
    knex('my_products').select() //–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
    .then( resp => ctx.reply(resp))
    .catch( err => ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')) 
})

bot.command('/delproductdata', ctx =>{
    Status = 'DelProductData' //–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–∫–æ–π-—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã my_products
    ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ ID$ProductData')         
})

bot.command('/delproduct', ctx =>{
    Status = 'DelProduct' //–£–¥–∞–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥–∏—Ç –∫–ª–∏–µ–Ω—Ç
    ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø—Ä–æ–¥—É–∫—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å')  
})

bot.on('text', ctx =>{ //–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ —á—Ç–æ –º—ã –≤–≤–æ–¥–∏–º, —Ç–æ —á—Ç–æ –≤–≤–æ–¥–∏—Ç –∞–¥–º–∏–Ω
    switch(Status){ //–¢–æ —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —ç—Ç–æ–º —Å–≤–∏—á–µ —è –æ–ø–∏—Å–∞–ª –≤—ã—à–µ
        case 'DelProduct':
            Status = 'Sleep'
            knex('my_productsinfo').where({product_id: ctx.message.text}).del()
            .then( resp => ctx.reply('–¢–æ–≤–∞—Ä –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'))
            .catch( _err => ctx.reply('–í–æ –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'))
            break
        case 'AddProduct_N':
            Status = 'AddProduct_D'
            Product.Name = ctx.message.text
            ctx.reply('–£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞') 
            break    
        case 'AddProduct_D':
            Status = 'AddProduct_P'
            Product.Description = ctx.message.text
            ctx.reply('–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞')
            break
        case 'AddProduct_P':
            Status = 'Sleep'
            Product.Price = parseInt(ctx.message.text)
            knex('my_productsinfo').insert({name: Product.Name, description: Product.Description, price: Product.Price})
            .then( resp =>ctx.reply('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω'))
            .catch( err => ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞')
            )
            break
        case 'AddProductData':
            Status = 'Sleep'
            t = ctx.message.text.split('$')
            knex('my_products').insert({product_id: t[0], product_data: t[1]})
            .then( resp => ctx.reply('–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î'))                
            .catch( err => ctx.reply('–í–æ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ë–î –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')) 
               
            break           

        case 'DelProductData':
            Status = 'Sleep'
            t = ctx.message.text.split('$')
            knex('my_products').where({product_id: t[0], product_data: t[1]}).del()
            .then( resp => ctx.reply('–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'))            
            .catch( err => ctx.reply('–í–æ –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'))
            break
    }
})


bot.launch().then( () =>{ //–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ —Å—Ç–∞—Ä—Ç—É–µ–º –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
    console.log('Bot Started!') 
    
    let timerId = setInterval( async () => { //–ü–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç, –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤ –∏ —É–¥–∞–ª–µ–Ω–∏—è –ª–∏—à–Ω–µ–≥–æ     
        my_orders = await knex('my_orders').whereNot({status: '–í—ã–ø–æ–ª–Ω–µ–Ω'}).select('address', 'status', 'price', 'product_id', 'order_data')
        for (let order of my_orders){ //–ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏ –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–∞–∂–¥–æ–º—É –∏–∑ –∑–∞–∫–∞–∑–æ–≤
            let balance = await getBalance(order.address)
            if (balance.received >= order.price){ //–ï—Å–ª–∏ –µ—Å—Ç—å –±–∞–ª–∞–Ω—Å —Ç–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –∏–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å, –∏ –∑–∞–∫–∏–¥—ã–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
                console.log(balance)
                let response = await knex('my_products').where({product_id: order.product_id})
                if (response != 0){
                    await knex('my_products').where({product_id: response[0].product_id, product_data: response[0].product_data}).del()
                    await knex('my_orders').where({address: order.address}).update({status: '–í—ã–ø–æ–ª–Ω–µ–Ω', product_data: response[0].product_data})
                    await Promise.reject(new Error("–£–ø—Å!"));
                }
            } else if (balance.unconfirmed  >= order.price){ //–°–º–æ—Ç—Ä–∏–º –µ—Å—Ç—å –ª–∏ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä—ã
                await knex('my_orders').where({address: order.address}).update({status: '–í –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π'})
            } else if (balance.received != 'Error'){ //–£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –æ—Ä–¥–µ—Ä—ã –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ 90 –∏ –±–æ–ª—å—à–µ –º–∏–Ω—É—Ç —Å –º–æ–º–µ–Ω—Ç–∞ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
                if (order.order_data.setMinutes(order.order_data.getMinutes()+90) <= new Date ){
                    await knex('my_orders').where({address: order.address}).del()
                    await Promise.reject(new Error("–£–ø—Å!"));
                }
            }     
        }        
    }, TenMinutes) 
})


process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))